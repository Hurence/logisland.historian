swagger: '2.0'
info:
  description: REST API for logisland historian
  version: v1
  title: Logisland Data Historian
  contact:
    name: hurence
    email: support@hurence.com
host: localhost:8701
basePath: /api/v1
schemes:
  - http
  - https
paths:


  /admin:
     post:
       tags:
        - tag
        - datasource
        - admin
       summary:  create new dataset with some sample data
       description:  create new dataset with some sample data
       operationId: sampleData
       produces:
          - application/json
       parameters:
         - name: flush
           in: query
           description: do we flush previous entries ?
           required: false
           type: boolean
           default: false
       responses:
         '200':
           description: Sample tag list
           schema:
             type: array
             items:
               $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  # Datasources
  /datasources:
     get:
       tags:
        - datasource
       operationId: getAllDatasources
       summary:  get all datasources
       description: retrieve all datasources
       parameters:
         - name: fq
           in: query
           description: filter query (lucene syntax like fq="labels:opc AND datasources:win32")
           required: false
           type: string
       produces:
          - application/json
       responses:
         '200':
           description: Datasource list
           schema:
             type: array
             items:
               $ref: '#/definitions/Datasource'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /datasources/tags:
     get:
       tags:
        - datasource
       operationId: getAllDatasourcesTags
       summary:  get all tags from datasources
       description: retrieve all tags through this datasources
       produces:
          - application/json
       responses:
         '200':
           description: Tag list
           schema:
             type: array
             items:
               $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /datasources/{datasourceId}/tags:
     get:
       tags:
        - tag
        - datasource
       operationId: getAllTagsFromDatasource
       summary:  get all tags from a given datasource
       description: retrieve all tags through this datasource
       produces:
          - application/json
       parameters:
         - name: datasourceId
           in: path
           description: id of the Datasource to return
           required: true
           type: string
       responses:
         '200':
           description: Tag list
           schema:
             type: array
             items:
               $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /datasources/{datasourceId}:
     get:
       tags:
         - datasource
       summary: get Datasource
       description: get the corresponding Datasource
       operationId: getDatasource
       produces:
         - application/json
       parameters:
         - name: datasourceId
           in: path
           description: id of the Datasource to return
           required: true
           type: string
       responses:
         '200':
           description: Datasource found
           schema:
             $ref: '#/definitions/Datasource'
         '404':
            description: Datasource resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
     delete:
       tags:
         - datasource
       summary: delete Datasource
       description: remove the corresponding Datasource
       operationId: deleteDatasource
       parameters:
         - name: datasourceId
           in: path
           description: id of the Datasource to be deleted
           required: true
           type: string
       responses:
         '404':
           description: Datasource resource not found
         '400':
           description: Invalid ID supplied
         '200':
           description: Datasource successfully removed
           schema:
             $ref: '#/definitions/Datasource'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
     put:
       tags:
        - datasource
       summary:  update Datasource
       description: update an existing Datasource
       operationId: updateDatasource
       parameters:
         - name: datasourceId
           in: path
           description: datasourceId to be updated
           required: true
           type: string
         - name: datasource
           in: body
           description: new Datasource definition
           required: true
           schema:
             $ref: '#/definitions/Datasource'
       responses:
        '404':
          description: Datasource resource not found
        '400':
          description: Invalid ID supplied
        '200':
         description: Datasource successfuly updated
         schema:
           $ref: '#/definitions/Datasource'
     post:
       tags:
        - datasource
       summary:  create new Datasource
       description:  store a new Datasource
       operationId: addDatasourceWithId
       parameters:
         - name: body
           in: body
           description: Datasource resource to add
           required: true
           schema:
             $ref: '#/definitions/Datasource'
         - name: datasourceId
           in: path
           description: datasourceId to
           required: true
           type: string
       responses:
         '400':
           description: Invalid ID supplied
         '200':
           description: Datasource successfuly created
           schema:
             $ref: '#/definitions/Datasource'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'





   # Tags API
  /tags:
    get:
      tags:
      - tag
      operationId: getAllTags
      parameters:
        - name: fq
          in: query
          description: filter query (lucene syntax like fq="labels:opc AND datasources:win32")
          required: false
          type: string
      summary:  get all saved tags
      description: retrieve all OPC tags
      produces:
        - application/json
      responses:
       '200':
         description: tags list
         schema:
           type: array
           items:
             $ref: '#/definitions/Tag'
       default:
         description: unexpected error
         schema:
           $ref: '#/definitions/Error'
  /tags/{itemId}:
     get:
       tags:
         - tag
       summary: get tag
       description: get the corresponding Tag
       operationId: getTag
       produces:
         - application/json
       parameters:
         - name: itemId
           in: path
           description: id of the tag to return
           required: true
           type: string
       responses:
         '200':
           description: tag
           schema:
             $ref: '#/definitions/Tag'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
     delete:
       tags:
         - tag
       summary: delete tag
       description: remove the corresponding Tag
       operationId: deleteTag
       parameters:
         - name: itemId
           in: path
           description: id of the tag to be deleted
           required: true
           type: string
       responses:
         '404':
           description: Tag resource not found
         '400':
           description: Invalid ID supplied
         '200':
           description: Tag successfully removed
           schema:
             $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
     put:
       tags:
        - tag
       summary:  update tag
       description: update an existing tag
       operationId: updateTag
       parameters:
         - name: itemId
           in: path
           description: itemId to be updated
           required: true
           type: string
         - name: tag
           in: body
           description: new Tag definition
           required: true
           schema:
             $ref: '#/definitions/Tag'
       responses:
        '404':
          description: Tag resource not found
        '400':
          description: Invalid ID supplied
        '200':
         description: Tag successfuly updated
         schema:
           $ref: '#/definitions/Tag'
     post:
       tags:
        - tag
       summary:  create new tag
       description:  store a new tag
       operationId: addTagWithId
       parameters:
         - name: body
           in: body
           description: Tag resource to add
           required: true
           schema:
             $ref: '#/definitions/Tag'
         - name: itemId
           in: path
           description: itemId to
           required: true
           type: string
       responses:
         '400':
           description: Invalid ID supplied
         '200':
           description: Tag successfuly created
           schema:
             $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /tags/{itemId}/measures:
     get:
       tags:
         - tag
         - measure
       summary: get tag measures
       description: get the corresponding Tag measures between start and end time
       operationId: getTagMeasures
       produces:
         - application/json
       parameters:
         - name: itemId
           in: path
           description: id of the tag
           required: true
           type: string
         - name: start
           in: query
           description: |
            date de début (borne inf) peut-être exprimée sous les formats suivants :
              timestamp : 4578965
              date-time : 2015-11-25T12:06:57.330Z
              relatif   : NOW-30DAYS
           required: false
           type: string
         - name: end
           in: query
           description: |
             date de fin (borne sup) peut-être exprimée sous les formats suivants :
               timestamp : 4578965
               date-time : 2015-11-25T12:06:57.330Z
               relatif   : NOW-30DAYS
           required: false
           type: string
         - name: functions
           in: query
           description: |
              Multiple analyses, aggregations, and transformations are allowed per query.
              If so, Chronix will first execute the transformations in the order they occur.
              Then it executes the analyses and aggregations on the result of the chained transformations.
              For example the query:

                max;min;trend;movavg:10,minutes;scale:4

              is executed as follows:

                Calculate the moving average
                Scale the result of the moving average by 4
                Calculate the max, min, and the trend based on the prior result.
           required: false
           type: string
         - name: no_values
           in: query
           description: will retrieve only function values, no data points
           required: false
           type: boolean
           default: false
       responses:
         '200':
           description: tag
           schema:
             $ref: '#/definitions/Measures'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /tags/{itemId}/stats:
     get:
       tags:
         - tag
         - measure
       summary: get tag measures stats
       description: get the corresponding Tag mesures for last chunk
       operationId: getTagStats
       produces:
         - application/json
       parameters:
         - name: itemId
           in: path
           description: id of the tag
           required: true
           type: string
       responses:
         '200':
           description: tag
           schema:
             $ref: '#/definitions/Measures'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /tags/measures:
     post:
       tags:
         - tag
         - measure
       summary: post tag measures
       description: post some new values
       operationId: postTagMeasures
       produces:
         - application/json
       parameters:
         - name: content
           in: formData
           description: the csv file content
           required: true
           type: file
         - name: csv_delimiter
           in: query
           description: the csv file content
           required: false
           type: string
           default: ';'
         - name: date_format
           in: query
           description: |
            valid values LONG (ms since 1970),
              INSTANT (default java 8 instant),
              'SDF-FORMAT' e.g dd.MM.yyyy HH:mm:ss.SSS
           required: false
           type: string
           default: 'dd.MM.yyyy HH:mm:ss.SSS'
         - name: number_format
           in: query
           description: valid values ENGLISH, GERMAN
           required: false
           type: string
           default: 'ENGLISH'
         - name: attribute_fields
           in: query
           required: false
           type: string
         - name: clean_import
           in: query
           description: will discard all previously loaded data (use it with great care)
           required: false
           type: boolean
           default: false
         - name: points_by_chunk
           in: query
           description: the number of points by chunk
           required: false
           type: integer
           format: int32
       responses:
         '200':
           description: BulkLoad result
           schema:
             $ref: '#/definitions/BulkLoad'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /tags/measures/generator:
     post:
       tags:
         - tag
         - measure
       summary: post tag measures simulation
       description: post some new values according to a simulation
       operationId: postTagMeasuresGenerator
       produces:
         - application/json
       parameters:
         - name: config
           in: formData
           description: the json config file
           required: true
           type: file
         - name: attribute_fields
           in: query
           required: false
           type: string
         - name: clean_import
           in: query
           description: will discard all previously loaded data (use it with great care)
           required: false
           type: boolean
           default: false
       responses:
         '200':
           description: BulkLoad result
           schema:
             $ref: '#/definitions/BulkLoad'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  # Selection API
  /selections:
    get:
     tags:
      - selection
     operationId: getAllUserSelection
     summary:  get all slections that this user has access to
     description: retrieve all slections that user has access to
     produces:
        - application/json
     responses:
       '200':
         description: Selection list
         schema:
           type: array
           items:
             $ref: '#/definitions/Selection'
       default:
         description: unexpected error
         schema:
           $ref: '#/definitions/Error'
  /selections/{selectionId}:
    get:
     tags:
       - selection
     summary: get Selection
     description: get the corresponding Selection
     operationId: getSelection
     produces:
       - application/json
     parameters:
       - name: selectionId
         in: path
         description: id of the Selection to return
         required: true
         type: string
     responses:
       '200':
         description: Selection found
         schema:
           $ref: '#/definitions/Selection'
       '404':
          description: Selection resource not found
       default:
         description: unexpected error
         schema:
           $ref: '#/definitions/Error'
    delete:
     tags:
       - selection
     summary: delete Selection
     description: remove the corresponding Selection
     operationId: deleteSelection
     parameters:
       - name: selectionId
         in: path
         description: id of the Selection to be deleted
         required: true
         type: string
     responses:
       '404':
         description: Selection resource not found
       '400':
         description: Invalid ID supplied
       '200':
         description: Selection successfully removed
         schema:
           $ref: '#/definitions/Selection'
       default:
         description: unexpected error
         schema:
           $ref: '#/definitions/Error'
    put:
     tags:
      - selection
     summary:  update Selection
     description: update an existing Selection
     operationId: updateSelection
     parameters:
       - name: selectionId
         in: path
         description: selectionId to be updated
         required: true
         type: string
       - name: selection
         in: body
         description: new Selection definition
         required: true
         schema:
           $ref: '#/definitions/Selection'
     responses:
      '404':
        description: Selection resource not found
      '400':
        description: Invalid ID supplied
      '200':
       description: Selection successfuly updated
       schema:
         $ref: '#/definitions/Selection'
    post:
     tags:
      - selection
     summary:  create new Selection
     description:  store a new Selection
     operationId: addSelectionWithId
     parameters:
       - name: body
         in: body
         description: Selection resource to add
         required: true
         schema:
           $ref: '#/definitions/Selection'
       - name: selectionId
         in: path
         description: selectionId to create
         required: true
         type: string
     responses:
       '400':
         description: Invalid ID supplied
       '200':
         description: Selection successfuly created
         schema:
           $ref: '#/definitions/Selection'
       default:
         description: unexpected error
         schema:
           $ref: '#/definitions/Error'
  /selections/{selectionId}/tags:
       get:
         tags:
          - selection
          - tag
         operationId: getAllTagsFromSelection
         summary:  get all tags from a selection
         description: retrieve all tags through this selection
         produces:
            - application/json
         parameters:
           - name: selectionId
             in: path
             description: id of the selection
             required: true
             type: string
         responses:
           '200':
             description: Tag list
             schema:
               type: array
               items:
                 $ref: '#/definitions/Tag'
           default:
             description: unexpected error
             schema:
               $ref: '#/definitions/Error'

  /metrics:
    get:
      tags:
        - metrology
      operationId: getMetrics
      summary: retrieve all job metrics in Prometheus format
      description: get Prometheus metrics.
        have a look to https://prometheus.io/docs/instrumenting/exposition_formats/
      produces:
        - text/plain
      responses:
        "200":
          description: metrics
          schema:
            type: string
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /configs:
    get:
      tags:
       - config
      operationId: getConfig
      summary:  global config
      description: get all global configuration properties
      responses:
        "200":
          description: global configuration
          schema:
            type: array
            items:
              $ref: '#/definitions/Property'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  # Alerts
  /alerts:
     get:
      tags:
        - alerts
      summary: get all alerts
      description: get the alerts
      operationId: getAlerts
      parameters:
        - name: count
          in: query
          description: max number of ites to retrieve
          required: false
          type: integer
          default: 20
        - name: severity
          in: query
          description: severity level (the higher the most severe)
          required: false
          type: integer
          default: 0
        - name: start
          in: query
          description: lower date range
          required: false
          type: string
          default: '1DAYS-AGO'
        - name: end
          in: query
          description: upper date range
          required: false
          type: string
          default: 'NOW'
      responses:
        "200":
          description: job metrics
          schema:
            type: array
            items:
              $ref: '#/definitions/Alert'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'


  # Pipeline API
  /pipelines:
    get:
      tags:
       - pipeline
      operationId: getAllPipelines
      summary:  get all pipelines
      description: retrieve all pipelines (retrieve only summary fields)
      responses:
        "200":
          description: pipeline configuration list
          schema:
            type: array
            items:
              $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pipelines/{pipelineId}:
    get:
      tags:
        - pipeline
      summary: get pipeline
      description: get the corresponding Pipeline definition
      operationId: getPipeline
      produces:
        - application/json
        - text/plain
      parameters:
        - name: pipelineId
          in: path
          description: id of the pipeline to return
          required: true
          type: string
      responses:
        "200":
          description: pipeline definition
          schema:
            $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - pipeline
      summary: delete pipeline
      description: remove the corresponding Pipeline definition and stop if its currently running
      operationId: deletePipeline
      parameters:
        - name: pipelineId
          in: path
          description: id of the pipeline to return
          required: true
          type: string
      responses:
        "404":
          description: Pipeline not found
        "400":
          description: Invalid ID supplied
        "200":
          description: pipeline successfully removed
          schema:
            $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
       - pipeline
      summary:  update pipeline
      description: update an existing pipeline configuration if valid
      operationId: updatePipeline
      parameters:
        - name: pipelineId
          in: path
          description: Pipeline to add to the store
          required: true
          type: string
        - name: pipeline
          in: body
          description: Pipeline to add to the store
          required: true
          schema:
            $ref: '#/definitions/Pipeline'
      responses:
        "200":
          description: Pipeline successfuly created
          schema:
            $ref: '#/definitions/Pipeline'
  /pipelines/{pipelineId}/start:
     post:
      tags:
        - pipeline
      summary: start pipeline
      description: start the corresponding Pipeline definition
      operationId: startPipeline
      parameters:
        - name: pipelineId
          in: path
          description: id of the pipeline to return
          required: true
          type: string
      responses:
        "200":
          description: pipeline successfuly started
          schema:
            $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pipelines/{pipelineId}/stop:
    post:
      tags:
       - pipeline
      summary:  create new pipeline
      description:  store a new pipeline configuration if valid
      operationId: addPipelineWithId
      parameters:
        - name: body
          in: body
          description: Pipeline configuration to add to the store
          required: true
          schema:
            $ref: '#/definitions/Pipeline'
        - name: pipelineId
          in: path
          description: PipelineId to add to the store
          required: true
          type: string
      responses:
        "404":
          description: Pipeline not found
        "400":
          description: Invalid ID supplied
        "200":
          description: Pipeline successfuly created
          schema:
            $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'



definitions:


  BulkLoad:
    type: object
    properties:
      start_time:
        type: string
      generation_duration:
        type: integer
        format: int32
        default: 0
      import_duration:
        type: integer
        format: int32
      num_metrics_imported:
        type: integer
        format: int32
      num_points_imported:
        type: integer
        format: int64
      metrics:
         type: array
         items:
          type: string

  Alert:
    type: object
    properties:
      record_type:
        type: string
        default: 'alert'
      timestamp:
        type: integer
        format: int64
      message:
        type: string
      severity:
        type: integer
      tag_id:
        $ref: '#/definitions/Tag'

  Datasource:
    type: object
    required:
      - id
      - host
    properties:
      record_type:
        type: string
        default: 'datasource'
      id:
        type: string
      description:
        type: string
      clsid:
        type: string
      datasource_type:
        type: string
      prog_id:
        type: string
      host:
        type: string
      domain:
        type: string
      user:
        type: string
      password:
        type: string


  Tag:
    type: object
    description: a Tag is an identifier to an OPC value
    required:
      - item_name
      - datasource_id
      - data_type
    properties:
      record_type:
        type: string
        default: 'tag'
      id:
        type: string
        default: 'mySweetUniqueId'
      datasource_id:
        type: string
      domain:
        type: string
      server:
        type: string
      group:
        type: string
      tag_name:
        type: string
      labels:
        description: can be used to group tags around a theme
        type: array
        items:
          type: string
      data_type:
        type: string
        default: float
        enum:
        - int
        - long
        - float
        - double
        - string
        - array
        - null
        - bytes
        - boolean
      description:
        type: string
      text:
        description: ctach all field
        type: array
        items:
          type: string
      creation_date:
        description: timestamp
        type: integer
        format: int64
      last_modification_date:
        description: timestamp
        type: integer
        format: int64
      last_polling_date:
        description: timestamp
        type: integer
        format: int64
      update_rate:
        description: polling delay in ms
        default: 1000
        type: integer
      min_numeric_value:
        type: number
        format: dumble
      max_numeric_value:
        type: number
        format: double
      last_numeric_value:
        type: number
        format: double
      last_quality:
        type: integer

  Selection:
    type: object
    description: a Selection is a selection of tags.
    required:
      - id
      - name
      - owner
      - tags
      - record_type
    properties:
      id:
        description: concatenation of owner with name for example
        type: string
      name:
        type: string
      owner:
        type: string
      tags:
        description: list of tags id in selection
        type: array
        items:
          type: string
      record_type:
        type: string
        default: 'selection'

  Measures:
    type: object
    description: holds a double array of values for a Tag between start & stop
    properties:
      name:
        type: string
      start:
        type: integer
        format: int64
      end:
        type: integer
        format: int64
      query_duration:
        type: integer
        format: int64
      quality:
        type: number
        format : double
      num_chunks:
        type: integer
        format: int64
      num_points:
        type: integer
        format: int32
      timestamps:
        type: array
        items:
          type: integer
          format: int64
      values:
        type: array
        items:
          type: number
          format: double
      functions:
        type: array
        items:
          $ref : "#/definitions/Function"

  Function:
    type: object
    properties:
      name:
        type: string
      value:
        type: number
        format: double


  Pipeline:
    type: object
    description: a Pipeline is a sequence of Processor wich apply specifi business logic on current tag value (matching query for alerting for example)
    required:
      - component
      - name
    properties:
      record_type:
        type: string
        default: 'pipeline'
      name:
        type: string
      component:
        type: string
      documentation:
        type: string
      config:
        type: array
        items:
          $ref: '#/definitions/Property'
      processors:
        type: array
        items:
          $ref: '#/definitions/Processor'

  Processor:
    type: object
    required:
      - component
      - config
      - name
    properties:
      name:
        type: string
      component:
        type: string
      documentation:
        type: string
      config:
        type: array
        items:
          $ref: '#/definitions/Property'

  Property:
    type: object
    required:
      - key
      - value
    properties:
      key:
        type: string
      type:
        type: string
        default: "string"
      value:
        type: string

  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
