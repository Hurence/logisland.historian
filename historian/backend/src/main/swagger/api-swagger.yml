swagger: '2.0'
info:
  description: REST API for logisland historian
  version: v1
  title: Logisland Data Historian
  contact:
    name: hurence
    email: support@hurence.com
host: localhost:8701
basePath: /api/v1
schemes:
  - http
  - https
paths:


  /admin/generate/tags:
     post:
       tags:
        - tag
        - datasource
        - admin
       summary:  create new dataset with some sample data
       description:  create new dataset with some sample data
       operationId: sampleData
       produces:
          - application/json
       parameters:
         - name: flush
           in: query
           description: do we flush previous entries ?
           required: false
           type: boolean
           default: false
         - name: clean
           in: query
           description: do we delete previous entries ?
           required: false
           type: boolean
           default: false
       responses:
         '200':
           description: Sample tag list
           schema:
             type: array
             items:
               $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /admin/generate/measures:
     post:
       tags:
        - tag
        - measures
        - admin
       summary: create new measures for all tags
       description: create new measures for all tags
       operationId: generateMeasuresForTags
       produces:
          - application/json
       parameters:
         - name: clean
           in: query
           description: do we delete previous entries ?
           required: false
           type: boolean
           default: false
         - name: generator
           in: formData
           description: json config file for genereting data (export will not be used instead it will generate data for all tags)
           required: true
           type: file
       responses:
         '200':
           description: BulkLoad result
           schema:
             $ref: '#/definitions/BulkLoad'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  # Datasources
  /datasources:
     get:
       tags:
        - datasource
       operationId: getAllDatasources
       summary:  get all datasources
       description: retrieve all datasources
       parameters:
         - name: fq
           in: query
           description: filter query (lucene syntax like fq="labels:opc AND datasources:win32")
           required: false
           type: string
       produces:
          - application/json
       responses:
         '200':
           description: Datasource list
           schema:
             type: array
             items:
               $ref: '#/definitions/Datasource'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /datasources/tags:
     get:
       tags:
        - datasource
       operationId: getAllDatasourcesTags
       summary:  get all tags from datasources
       description: retrieve all tags through this datasources
       produces:
          - application/json
       responses:
         '200':
           description: Tag list
           schema:
             type: array
             items:
               $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /datasources/{datasourceId}/tags:
     get:
       tags:
        - tag
        - datasource
       operationId: browseTagsFromDatasource
       summary:  Browse tags from a given datasource
       description: Browsetags through this datasource
       produces:
          - application/json
       parameters:
         - name: datasourceId
           in: path
           description: id of the Datasource to return
           required: true
           type: string
         - name: root
           in: query
           description: The root tag to start browsing from
           required: false
           type: string
         - name: depth
           in: query
           description: The depth of the visit
           required: false
           type: integer
           default: 1
       responses:
         '200':
           description: The list of browsed tags
           schema:
             type: array
             items:
               $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /datasources/{datasourceId}/fetchtag:
    get:
       tags:
        - tag
        - datasource
       operationId: fetchTagMetadataFromDatasource
       summary:  fetch tag properties from a datasource
       description: fetch tag properties from a datasource
       produces:
          - application/json
       parameters:
         - name: datasourceId
           in: path
           description: id of the Datasource to connect to
           required: true
           type: string
         - name: tagId
           in: query
           description: id of the tag to inspect
           required: true
           type: string
       responses:
         '200':
           description: Tag information
           schema:
            $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /datasources/{datasourceId}:
    get:
     tags:
       - datasource
     summary: get Datasource
     description: get the corresponding Datasource
     operationId: getDatasource
     produces:
       - application/json
     parameters:
       - name: datasourceId
         in: path
         description: id of the Datasource to return
         required: true
         type: string
     responses:
       '200':
         description: Datasource found
         schema:
           $ref: '#/definitions/Datasource'
       '404':
          description: Datasource resource not found
       default:
         description: unexpected error
         schema:
           $ref: '#/definitions/Error'
    delete:
     tags:
       - datasource
     summary: delete Datasource
     description: remove the corresponding Datasource
     operationId: deleteDatasource
     parameters:
       - name: datasourceId
         in: path
         description: id of the Datasource to be deleted
         required: true
         type: string
     responses:
       '404':
         description: Datasource resource not found
       '400':
         description: Invalid ID supplied
       '200':
         description: Datasource successfully removed
         schema:
           $ref: '#/definitions/Datasource'
       default:
         description: unexpected error
         schema:
           $ref: '#/definitions/Error'
    put:
     tags:
      - datasource
     summary:  create or replace a Datasource
     description: create or replace a Datasource
     operationId: createOrReplaceADatasource
     parameters:
       - name: datasourceId
         in: path
         description: datasourceId to be added/replaced
         required: true
         type: string
       - name: datasource
         in: body
         description: Datasource definition
         required: true
         schema:
           $ref: '#/definitions/Datasource'
     responses:
      '400':
        description: Invalid ID supplied
      '201':
        description: Datasource successfuly created
        schema:
          $ref: '#/definitions/Datasource'
      '200':
       description: Datasource successfuly replaced
       schema:
         $ref: '#/definitions/Datasource'

   # Tags API
  /tags:
    get:
      tags:
      - tag
      operationId: getAllTags
      parameters:
        - name: fq
          in: query
          description: filter query (lucene syntax like fq="labels:opc AND datasources:win32")
          required: false
          type: string
        - name: limit
          in: query
          description: max number of elements to return
          required: false
          type: integer
          format: int32
        - name: sort
          in: query
          description: sort query <field name>+<direction>[,<field name>+<direction>] (syntax like sort=last_modification_date desc )
          required: false
          type: string
      summary:  get all saved tags
      description: retrieve all OPC tags
      produces:
        - application/json
      responses:
       '200':
         description: tags list
         schema:
           type: array
           items:
             $ref: '#/definitions/Tag'
       default:
         description: unexpected error
         schema:
           $ref: '#/definitions/Error'
  /tags/{tagId}:
     get:
       tags:
         - tag
       summary: get tag
       description: get the corresponding Tag
       operationId: getTag
       produces:
         - application/json
       parameters:
         - name: tagId
           in: path
           description: id of the tag to return
           required: true
           type: string
       responses:
         '200':
           description: tag
           schema:
             $ref: '#/definitions/Tag'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
     delete:
       tags:
         - tag
       summary: delete tag
       description: remove the corresponding Tag
       operationId: deleteTag
       parameters:
         - name: tagId
           in: path
           description: id of the tag to be deleted
           required: true
           type: string
       responses:
         '404':
           description: Tag resource not found
         '400':
           description: Invalid ID supplied
         '200':
           description: Tag successfully removed
           schema:
             $ref: '#/definitions/Tag'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
     put:
       tags:
        - tag
       summary: create or replace a tag
       description: create or replace a tag
       operationId: createOrReplaceATag
       parameters:
         - name: tagId
           in: path
           description: tagId to be created/replaced
           required: true
           type: string
         - name: tag
           in: body
           description: Tag definition
           required: true
           schema:
             $ref: '#/definitions/Tag'
       responses:
        '400':
          description: Invalid ID supplied
        '201':
          description: Tag successfuly created
          schema:
            $ref: '#/definitions/Tag'
        '200':
          description: Tag successfuly replaced
          schema:
            $ref: '#/definitions/Tag'

  /tags/{tagId}/measures:
     get:
       tags:
         - tag
         - measure
       summary: get tag measures
       description: get the corresponding Tag measures between start and end time
       operationId: getTagMeasures
       produces:
         - application/json
       parameters:
         - name: tagId
           in: path
           description: id of the tag
           required: true
           type: string
         - name: start
           in: query
           description: |
            date de début (borne inf) peut-être exprimée sous les formats suivants :
              timestamp : 4578965
              date-time : 2015-11-25T12:06:57.330Z
              relatif   : NOW-30DAYS
           required: false
           type: string
         - name: end
           in: query
           description: |
             date de fin (borne sup) peut-être exprimée sous les formats suivants :
               timestamp : 4578965
               date-time : 2015-11-25T12:06:57.330Z
               relatif   : NOW-30DAYS
           required: false
           type: string
         - name: functions
           in: query
           description: |
              Multiple analyses, aggregations, and transformations are allowed per query.
              If so, Chronix will first execute the transformations in the order they occur.
              Then it executes the analyses and aggregations on the result of the chained transformations.
              For example the query:

                max;min;trend;movavg:10,minutes;scale:4

              is executed as follows:

                Calculate the moving average
                Scale the result of the moving average by 4
                Calculate the max, min, and the trend based on the prior result.
           required: false
           type: string
         - name: no_values
           in: query
           description: will retrieve only function values, no data points
           required: false
           type: boolean
           default: false
       responses:
         '200':
           description: tag
           schema:
             $ref: '#/definitions/Measures'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  /tags/{tagId}/stats:
     get:
       tags:
         - tag
         - measure
       summary: get tag measures stats
       description: get the corresponding Tag mesures for last chunk
       operationId: getTagStats
       produces:
         - application/json
       parameters:
         - name: tagId
           in: path
           description: id of the tag
           required: true
           type: string
       responses:
         '200':
           description: tag
           schema:
             $ref: '#/definitions/Measures'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /tags/batch:
    post:
      tags:
       - tag
      summary: create or update many tags
      description: create or update the given tags
      operationId: addManyTags
      produces:
        - application/json
      parameters:
        - name: tags
          in: body
          schema:
            type: array
            items:
             $ref: '#/definitions/Tag'
          description: tags to create or update.
          required: true
      responses:
        '200':
          description: Ok.
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
       - tag
      summary: delete tags
      description: delete the corresponding tags
      operationId: deleteManyTags
      produces:
        - application/json
      parameters:
        - name: tagIds
          in: body
          schema:
            type: array
            items:
             type: string
          description: id of the tags to be deleted.
          required: true
      responses:
        '200':
          description: Tags successfully removed or not found.
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tags/tree:
       get:
         tags:
           - tag
         summary: get tag tree by fields
         description: get tag tree by fields for each value of chosen fields
         operationId: getTreeTag
         produces:
           - application/json
         parameters:
#           - name: fields
#             in: query
#             description: the chosen fields of Tag to built the tre with
#             required: false
#             type: array
#             items:
#              type: string
           - name: limit
             in: query
             description: maximum number of element to retrieve in a treenode.
             required: false
             type: integer
             format: int32
             default: 100
         responses:
           '200':
             description: Tree of tag fields
             schema:
              type: array
              items:
                $ref: '#/definitions/TreeNode'
           '404':
              description: Tree of tag could not be build
           default:
             description: unexpected error
             schema:
               $ref: '#/definitions/Error'
  /tags/importcsv:
    post:
      tags:
       - tag
       - import
      summary: import definition of tags in csv format
      description: import definition of tags in csv format
      operationId: importTagsFromCsv
      produces:
       - application/json
      parameters:
       - name: file
         in: formData
         description: the csv file content
         required: true
         type: file
       - name: default_headers
         in: query
         description: |
          default value for missing headers. For example :
            datasource_id:ma datasource id,type:double
          would use "ma datasource id" as default value for datasource_id if not present in csv
          and use "double" as default value for type if not present in csv
         required: false
         type: string
       - name: separator
         in: query
         description: the csv file separator
         required: false
         type: string
         default: ';'
       - name: charset
         in: query
         description: the csv file charset encoding
         required: false
         type: string
         default: 'UTF-8'
       - name: bulkSize
         in: query
         description: the number of line to inject at the same time
         required: false
         type: integer
         format: int32
         default: 10000

      responses:
       '200':
         description: import succeeded
         schema:
           $ref: '#/definitions/ImportTagReport'
       '422':
         description: csv file not containing required headers.
         schema:
           type: array
           items:
             $ref: '#/definitions/Header'
       default:
         description: unexpected error
         schema:
           $ref: '#/definitions/Error'
    get:
      tags:
        - tag
        - import
      summary: return expected headers in csv file for POST request
      description: return expected headers in csv file for POST request
      operationId: getTagsCsvHeaders
      produces:
        - application/json
      responses:
        '200':
          description: list of expected headers (required or not)
          schema:
            type: array
            items:
              $ref: '#/definitions/Header'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tags/measures:
     post:
       tags:
         - tag
         - measure
       summary: post tag measures
       description: post some new values
       operationId: postTagMeasures
       produces:
         - application/json
       parameters:
         - name: content
           in: formData
           description: the csv file content
           required: true
           type: file
         - name: csv_delimiter
           in: query
           description: the csv file content
           required: false
           type: string
           default: ';'
         - name: date_format
           in: query
           description: |
            valid values LONG (ms since 1970),
              INSTANT (default java 8 instant),
              'SDF-FORMAT' e.g dd.MM.yyyy HH:mm:ss.SSS
           required: false
           type: string
           default: 'dd.MM.yyyy HH:mm:ss.SSS'
         - name: number_format
           in: query
           description: valid values ENGLISH, GERMAN
           required: false
           type: string
           default: 'ENGLISH'
         - name: attribute_fields
           in: query
           required: false
           type: string
         - name: clean_import
           in: query
           description: will discard all previously loaded data (use it with great care)
           required: false
           type: boolean
           default: false
         - name: points_by_chunk
           in: query
           description: the number of points by chunk
           required: false
           type: integer
           format: int32
       responses:
         '200':
           description: BulkLoad result
           schema:
             $ref: '#/definitions/BulkLoad'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /tags/measures/getmany:
     post:
       tags:
         - tag
         - measure
       summary: get specified tag measures
       description: get specified tag measures
       operationId: getTagMeasures
       produces:
         - application/json
       parameters:
        - name: requests
          in: body
          description: requests for measures to retrieve
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/MeasuresRequest'
       responses:
         '200':
           description: Measures
           schema:
             type: array
             items:
               $ref: '#/definitions/Measures'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
  /tags/measures/generator:
     post:
       tags:
         - tag
         - measure
       summary: post tag measures simulation
       description: post some new values according to a simulation
       operationId: postTagMeasuresGenerator
       produces:
         - application/json
       parameters:
         - name: config
           in: formData
           description: the json config file
           required: true
           type: file
         - name: attribute_fields
           in: query
           required: false
           type: string
         - name: clean_import
           in: query
           description: will discard all previously loaded data (use it with great care)
           required: false
           type: boolean
           default: false
       responses:
         '200':
           description: BulkLoad result
           schema:
             $ref: '#/definitions/BulkLoad'
         '404':
            description: Tag resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'

  # Selection API
  /selections:
      get:
        tags:
          - selection
        operationId: getAllUserSelection
        summary:  get all slections that this user has access to
        description: retrieve all slections that user has access to
        produces:
          - application/json
        responses:
          '200':
             description: Selection list
             schema:
               type: array
               items:
                 $ref: '#/definitions/Selection'
          default:
             description: unexpected error
             schema:
               $ref: '#/definitions/Error'
  /selections/{selectionName}:
      get:
       tags:
         - selection
       summary: get Selection
       description: get the corresponding Selection
       operationId: getSelection
       produces:
         - application/json
       parameters:
         - name: selectionName
           in: path
           description: id of the Selection to return
           required: true
           type: string
       responses:
         '200':
           description: Selection found
           schema:
             $ref: '#/definitions/Selection'
         '404':
            description: Selection resource not found
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
      delete:
       tags:
         - selection
       summary: delete Selection
       description: remove the corresponding Selection
       operationId: deleteSelection
       parameters:
         - name: selectionName
           in: path
           description: id of the Selection to be deleted
           required: true
           type: string
       responses:
         '404':
           description: Selection resource not found
         '400':
           description: Invalid ID supplied
         '200':
           description: Selection successfully removed
           schema:
             $ref: '#/definitions/Selection'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'
      put:
       tags:
        - selection
       summary:  update Selection
       description: update an existing Selection
       operationId: updateSelection
       parameters:
         - name: selectionName
           in: path
           description: selectionName to be updated
           required: true
           type: string
         - name: body
           in: body
           description: new Selection definition
           required: true
           schema:
             $ref: '#/definitions/Selection'
       responses:
        '404':
          description: Selection resource not found
        '400':
          description: Invalid ID supplied
        '200':
         description: Selection successfuly updated
         schema:
           $ref: '#/definitions/Selection'
      post:
       tags:
        - selection
       summary:  create new Selection
       description:  store a new Selection
       operationId: addSelectionWithId
       parameters:
         - name: body
           in: body
           description: Selection resource to add
           required: true
           schema:
             $ref: '#/definitions/Selection'
         - name: selectionName
           in: path
           description: selectionName to create
           required: true
           type: string
       responses:
         '400':
           description: Invalid ID supplied
         '200':
           description: Selection successfuly created
           schema:
             $ref: '#/definitions/Selection'
         default:
           description: unexpected error
           schema:
             $ref: '#/definitions/Error'


  /selections/{selectionName}/tags:
       get:
         tags:
          - selection
          - tag
         operationId: getAllTagsFromSelection
         summary:  get all tags from a selection
         description: retrieve all tags through this selection
         produces:
            - application/json
         parameters:
           - name: selectionName
             in: path
             description: id of the selection
             required: true
             type: string
         responses:
           '200':
             description: Tag list
             schema:
               type: array
               items:
                 $ref: '#/definitions/Tag'
           default:
             description: unexpected error
             schema:
               $ref: '#/definitions/Error'

  /metrics:
    get:
      tags:
        - metrology
      operationId: getMetrics
      summary: retrieve all job metrics in Prometheus format
      description: get Prometheus metrics.
        have a look to https://prometheus.io/docs/instrumenting/exposition_formats/
      produces:
        - text/plain
      responses:
        "200":
          description: metrics
          schema:
            type: string
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /configs:
    get:
      tags:
       - config
      operationId: getConfig
      summary:  global config
      description: get all global configuration properties
      responses:
        "200":
          description: global configuration
          schema:
            type: array
            items:
              $ref: '#/definitions/Property'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  # Alerts
  /alerts:
     get:
      tags:
        - alerts
      summary: get all alerts
      description: get the alerts
      operationId: getAlerts
      parameters:
        - name: count
          in: query
          description: max number of ites to retrieve
          required: false
          type: integer
          default: 20
        - name: severity
          in: query
          description: severity level (the higher the most severe)
          required: false
          type: integer
          default: 0
        - name: start
          in: query
          description: lower date range
          required: false
          type: string
          default: '1DAYS-AGO'
        - name: end
          in: query
          description: upper date range
          required: false
          type: string
          default: 'NOW'
      responses:
        "200":
          description: job metrics
          schema:
            type: array
            items:
              $ref: '#/definitions/Alert'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'


  # Pipeline API
  /pipelines:
    get:
      tags:
       - pipeline
      operationId: getAllPipelines
      summary:  get all pipelines
      description: retrieve all pipelines (retrieve only summary fields)
      responses:
        "200":
          description: pipeline configuration list
          schema:
            type: array
            items:
              $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pipelines/{pipelineId}:
    get:
      tags:
        - pipeline
      summary: get pipeline
      description: get the corresponding Pipeline definition
      operationId: getPipeline
      produces:
        - application/json
        - text/plain
      parameters:
        - name: pipelineId
          in: path
          description: id of the pipeline to return
          required: true
          type: string
      responses:
        "200":
          description: pipeline definition
          schema:
            $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - pipeline
      summary: delete pipeline
      description: remove the corresponding Pipeline definition and stop if its currently running
      operationId: deletePipeline
      parameters:
        - name: pipelineId
          in: path
          description: id of the pipeline to return
          required: true
          type: string
      responses:
        "404":
          description: Pipeline not found
        "400":
          description: Invalid ID supplied
        "200":
          description: pipeline successfully removed
          schema:
            $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
       - pipeline
      summary:  update pipeline
      description: update an existing pipeline configuration if valid
      operationId: updatePipeline
      parameters:
        - name: pipelineId
          in: path
          description: Pipeline to add to the store
          required: true
          type: string
        - name: pipeline
          in: body
          description: Pipeline to add to the store
          required: true
          schema:
            $ref: '#/definitions/Pipeline'
      responses:
        "200":
          description: Pipeline successfuly created
          schema:
            $ref: '#/definitions/Pipeline'
  /pipelines/{pipelineId}/start:
     post:
      tags:
        - pipeline
      summary: start pipeline
      description: start the corresponding Pipeline definition
      operationId: startPipeline
      parameters:
        - name: pipelineId
          in: path
          description: id of the pipeline to return
          required: true
          type: string
      responses:
        "200":
          description: pipeline successfuly started
          schema:
            $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pipelines/{pipelineId}/stop:
    post:
      tags:
       - pipeline
      summary:  create new pipeline
      description:  store a new pipeline configuration if valid
      operationId: addPipelineWithId
      parameters:
        - name: body
          in: body
          description: Pipeline configuration to add to the store
          required: true
          schema:
            $ref: '#/definitions/Pipeline'
        - name: pipelineId
          in: path
          description: PipelineId to add to the store
          required: true
          type: string
      responses:
        "404":
          description: Pipeline not found
        "400":
          description: Invalid ID supplied
        "200":
          description: Pipeline successfuly created
          schema:
            $ref: '#/definitions/Pipeline'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /dataflows/{dataflowName}:
    parameters:
      - name: dataflowName
        in: path
        type: string
        required: true
        description: the dataflow name (aka the logisland job name)
    get:
      tags:
       - dataflow
      operationId: pollDataflowConfiguration
      summary:  Retrieves the configuration for a specified dataflow
      description: >-
        A dataflow is a set of services and streams allowing a data flowing from one or more sources, being transformed and reach one or more destinations (sinks).
        Logisland will call this endpoint to know which configuration should be run.
         This endpoint also supports HTTP caching (Last-Updated, If-Modified-Since) as per RFC 7232, section 3.3
      parameters:
        - name: If-Modified-Since
          in: header
          type: string
          description: Timestamp of last response
          required: false

      responses:
        "200":
          description: >-
            Return the dataflow configuration.
            On logisland side, the following will happen:
            - At dataflow level:
              - Fully reconfigure a dataflow (stop and then start) if nothing is running (initial state) or if lastUpdated is fresher than the one of the already running dataflow.
                In this case be aware that old stream and services will be destroyed and
                new ones will be created.
              - Do nothing otherwise (keep running the active dataflow)
            - At pipeline level:
              - The processor chain will be fully reconfigured if and only if the pipeline lastUpdated is fresher than the lastUpdated known by the system.
              In any case the stream is never stopped.
          headers:
            Last-Updated:
              type: string
              description: Should be used for subsequent requests as If-Modified-Since request header.
          schema:
            $ref: '#/definitions/DataFlow'
          examples:
            A single stream dataflow:
              lastModified: '1983-06-04T10:00.000Z'
              modificationReason: Index Apache Logs again
              services:
              - component: com.hurence.logisland.service.elasticsearch.Elasticsearch_5_4_0_ClientService
                documentation: elasticsearch service to sink records
                name: elasticsearch_service
                config:
                - key: hosts
                  value: eshost:9300
                - key: cluster.name
                  value: escluster
              streams:
              - name: kafka_in
                component: com.hurence.logisland.stream.spark.KafkaRecordStreamParallelProcessing
                config:
                - key: kafka.input.topics
                  value: logisland_raw
                - key: kafka.output.topics
                  value: logisland_events
                - key: kafka.error.topics
                  value: logisland_errors
                - key: kafka.input.topics.serializer
                  value: none
                - key: kafka.output.topics.serializer
                  value: com.hurence.logisland.serializer.KryoSerializer
                - key: kafka.error.topics.serializer
                  value: com.hurence.logisland.serializer.JsonSerializer
                - key: kafka.metadata.broker.list
                  value: sandbox:9092
                - key: kafka.zookeeper.quorum
                  value: sandbox:2181
                - key: kafka.topic.autoCreate
                  value: 'true'
                - key: kafka.topic.default.partitions
                  value: '4'
                - key: kafka.topic.default.replicationFactor
                  value: '1'
                  pipeline:
                    lastModified: '1983-06-04T10:00.000Z'
                    modificationReason: Initial configuration
                    processors:
                    - component: com.hurence.logisland.processor.SplitText
                      name: apache_parser
                      documentation: parse apache logs with a regexp
                      config:
                      - key: record.type
                        value: apache_log
                      - key: value.regex
                        value: (\S+)\s+(\S+)\s+(\S+)\s+\[([\w:\/]+\s[+\-]\d{4})\]\s+"(\S+)\s+(\S+)\s*(\S*)"\s+(\S+)\s+(\S+)
                      - key: value.fields
                        value: src_ip,identd,user,record_time,http_method,http_query,http_version,http_status,bytes_out
                    - component: com.hurence.logisland.processor.elasticsearch.BulkAddElasticsearch
                      documentation: a processor that indexes processed events in elasticsearch
                      name: es_publisher
                      config:
                      - key: elasticsearch.client.service
                        value: elasticsearch_service
                      - key: default.index
                        value: logisland
                      - key: default.type
                        value: event
                      - key: timebased.index
                        value: yesterday
                      - key: es.index.field
                        value: search_index
                      - key: es.type.field
                        value: record_type

        "304":
          description: |
            Nothing has been modified since the last call.
            In this case the body content will be completely ignored
            (hence the server can answer with an empty body to save network and resources).
        "404":
          description: Not found (the server probably does not handle this dataflow)
        default :
          description: Unexpected error
    post:
      tags:
       - dataflow
      operationId: notifyDataflowConfiguration
      summary: Push the configuration of running dataflows.
      description: >-
        In order to ensure business continuity, Logisland will contact the third party application in order to push a snapshot of the current configuration.
        The endpoint will be called:
        - On a regular basis (according to logisland configuration).
        - Each time the a dataflow or a pipeline configuration change has been applied.
        This service can be seen as well as a liveness ping.
      parameters:
        - in: body
          name: dataflow
          required: true
          schema:
            $ref: '#/definitions/DataFlow'
      responses:
        default :
          description: |
            The server should return HTTP 200 OK.
            By the way, the response is ignored by Logisland since the operation
            has a *fire and forget* nature.
  /dataflows/{dataflowName}/auto-update:
    parameters:
      - name: dataflowName
        in: path
        type: string
        required: true
        description: the dataflow name (aka the logisland job name)
    post:
      tags:
       - dataflow
      summary:  generate a new config for dataflow if handled
      description: generate a new config for dataflow if handled
      operationId: updateDataflowConfiguration
      responses:
        "404":
          description: Dataflow not found
        "200":
          description: Dataflow successfuly updated
          schema:
            $ref: '#/definitions/DataFlow'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:


  BulkLoad:
    type: object
    properties:
      start_time:
        description: timestamp
        type: integer
        format: int64
      generation_duration:
        type: integer
        format: int32
        default: 0
      import_duration:
        type: integer
        format: int32
      num_metrics_imported:
        type: integer
        format: int32
      num_points_imported:
        type: integer
        format: int64
      metrics:
         type: array
         items:
          type: string

  ImportTagReport:
    type: object
    properties:
      start_time:
        description: timestamp
        type: integer
        format: int64
      import_duration:
        type: integer
        format: int32
      num_tags_imported:
        type: integer
        format: int64
      num_tags_not_imported:
        type: integer
        format: int64
      errors:
         type: array
         items:
          type: string

  Alert:
    type: object
    properties:
      record_type:
        type: string
        default: 'alert'
      timestamp:
        type: integer
        format: int64
      message:
        type: string
      severity:
        type: integer
      tag_id:
        $ref: '#/definitions/Tag'

  Datasource:
    type: object
    required:
      - id
      - host
    properties:
      id:
        type: string
      description:
        type: string
      clsid:
        type: string
      datasource_type:
        type: string
        enum:
          - 'OPC-DA'
          - 'OPC-UA'
          - 'UNKNOWN' # Needed so that bin/codegen.sh generate enum as OPC_DA/OPC_UA instead of DA/UA....
        default: 'OPC-UA'
      prog_id:
        type: string
      host:
        type: string
      domain:
        type: string
      user:
        type: string
      password:
        type: string
      tag_browsing:
        type: string
        enum:
          - 'automatic'
          - 'manual'
        default: 'automatic'

  Selection:
    type: object
    description: a Selection is a selection of tags.
    required:
      - name
      - tagIds
    properties:
      name:
        type: string
      description:
        description: description for this selection of tags
        type: string
      owner:
        type: string
      permissions:
        $ref: '#/definitions/Permissions'
      tagIds:
        description: list of tags id in selection
        type: array
        items:
          type: string

  Permissions:
    type: object
    description: a Permissions can allow to share something with others. It describes permission for one item.
    properties:
      ownerSharing:
        description: list of users name whose allowed.
        type: array
        items:
          type: string
      roleSharing:
        description: list of roles whose allowed.
        type: array
        items:
          type: string

  Tag:
    type: object
    description: a Tag is an identifier to an OPC value
    required:
      - node_id
      - datasource_id
      - data_type
      - enabled
      - update_rate
    properties:
      record_type:
        type: string
        default: 'tag'
      id:
        type: string
      node_id:
        type: string
      datasource_id:
        type: string
      group:
        type: string
      tag_name:
        type: string
      labels:
        description: can be used to group tags around a theme
        type: array
        items:
          type: string
      data_type:
        type: string
        default: float
        enum:
        - int
        - long
        - float
        - double
        - string
        - array
        - null
        - bytes
        - boolean
      description:
        type: string
      text:
        description: ctach all field
        type: array
        items:
          type: string
      creation_date:
        description: timestamp
        type: integer
        format: int64
      last_modification_date:
        description: timestamp
        type: integer
        format: int64
      last_polling_date:
        description: timestamp
        type: integer
        format: int64
      update_rate:
        description: polling delay in ms
        type: integer
      server_scan_rate:
        description: scan rate of server in ms
        type: integer
      min_numeric_value:
        type: number
        format: dumble
      max_numeric_value:
        type: number
        format: double
      last_numeric_value:
        type: number
        format: double
      last_quality:
        type: integer
      enabled:
        description: polling delay in ms
        type: boolean
      polling_mode:
        type: string
        enum:
          - 'polling'
          - 'subscribe'
        default: 'polling'

  Measures:
    type: object
    description: holds a double array of values for a Tag between start & stop
    properties:
      name:
        type: string
      datasource_id:
        type: string
      tag_id:
        type: string
      start:
        type: integer
        format: int64
      end:
        type: integer
        format: int64
      query_duration:
        type: integer
        format: int64
      quality:
        type: number
        format : double
      num_chunks:
        type: integer
        format: int64
      num_points:
        type: integer
        format: int32
      timestamps:
        type: array
        items:
          type: integer
          format: int64
      values:
        type: array
        items:
          type: number
          format: double
      functions:
        type: array
        items:
          $ref : "#/definitions/Function"

  MeasuresRequest:
    type: object
    description: contain request option for data of tag
    required:
      - tagId
    properties:
      tagId:
        type: string
      start:
        type: string
        description: |
          date de début (borne inf) peut-être exprimée sous les formats suivants :
            timestamp : 4578965
            date-time : 2015-11-25T12:06:57.330Z
            relatif   : NOW-30DAYS
      end:
        type: string
        description: |
           date de fin (borne sup) peut-être exprimée sous les formats suivants :
             timestamp : 4578965
             date-time : 2015-11-25T12:06:57.330Z
             relatif   : NOW-30DAYS
      function:
        type: string
        description: |
          Multiple analyses, aggregations, and transformations are allowed per query.
          If so, Chronix will first execute the transformations in the order they occur.
          Then it executes the analyses and aggregations on the result of the chained transformations.
          For example the query:

            max;min;trend;movavg:10,minutes;scale:4

          is executed as follows:

            Calculate the moving average
            Scale the result of the moving average by 4
            Calculate the max, min, and the trend based on the prior result.
      no_values:
        type: boolean
        description: will retrieve only function values, no data points
        default: false

  Function:
    type: object
    properties:
      name:
        type: string
      value:
        type: number
        format: double

  Property:
    type: object
    required:
      - key
      - value
    properties:
      key:
        type: string
      type:
        type: string
        default: "string"
      value:
        type: string

  Component:
    type: object
    required:
      - component
      - name
    properties:
      name:
        type: string
      component:
        type: string
      documentation:
        type: string
      config:
        type: array
        items:
          $ref: '#/definitions/Property'

  Service:
    type: object
    description: A logisland 'controller service'.
    allOf:
      - $ref: '#/definitions/Component'

  Processor:
      type: object
      description: A logisland 'processor'.
      allOf:
        - $ref: '#/definitions/Component'

  Versioned:
      type: object
      description: a versioned component
      properties:
        lastModified:
          type: string
          description: the last modified timestamp of this pipeline (used to trigger changes).
        modificationReason:
          type: string
          description: Can be used to document latest changeset.
      required:
        - lastModified

  Pipeline:
    type: object
    description: Tracks stream processing pipeline configuration
    allOf:
      - $ref: '#/definitions/Versioned'
      - properties:
          processors:
            type: array
            items:
              $ref: '#/definitions/Processor'

  Stream:
    type: object
    allOf:
      - $ref: '#/definitions/Component'
      - properties:
          pipeline:
            $ref: '#/definitions/Pipeline'
    required:
      - pipeline

  DataFlow:
    type: object
    description: A streaming pipeline.
    allOf:
      - $ref: "#/definitions/Versioned"
      - properties:
          id:
            type: string
            description: The id of the dataflow.
            writeOnly: true
          services:
            type: array
            description: The service controllers.
            items:
              $ref: '#/definitions/Service'
          streams:
            type: array
            description: The engine properties.
            items:
              $ref: '#/definitions/Stream'

  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string

  TreeNode:
      type: object
      required:
        - value
        - totalChildNumber
        - children
      properties:
        value:
          type: string
        totalChildNumber:
          type: integer
          format: int64
        children:
          type: array
          items:
            $ref: '#/definitions/TreeNode'

  Header:
    required:
      - name
      - required
    properties:
      name:
        type: string
      required:
        type: boolean
      type:
        type: string

  HeaderDefault:
    required:
      - name
      - value
    properties:
      name:
        type: string
      value:
        type: string
