<!DOCTYPE html>
<meta charset="utf-8">

<script src="#{url_for_solr}/admin/file?file=/velocity/d3.v2.min.js" charset="utf-8"></script>
<script src="#{url_for_solr}/admin/file?file=/velocity/assets/js/jsonQ.min.js"></script>
<body id="demo">
    <script>

        //return an array of objects according to key, value, or key and value matching
        function getObjects(obj, key, val) {
            var objects = [];
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) 
                    continue;
                if (typeof obj[i] == 'object') {
                    objects = objects.concat(getObjects(obj[i], key, val));
                } else
                // if key matches and value matches or if key matches and value is not passed (eliminating the case
                // where key matches but passed value does not)
                if (i == key && obj[i] == val || i == key && val == '') { //
                    objects.push(obj);
                } else if (obj[i] == val && key == '') {
                    //only add if the object is not already in the array
                    if (objects.lastIndexOf(obj) == -1) {
                        objects.push(obj);
                    }
                }
            }
            return objects;
        }

        //return an array of values that match on a certain key
        function getValues(obj, key) {
            var objects = [];
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) 
                    continue;
                if (typeof obj[i] == 'object') {
                    objects = objects.concat(getValues(obj[i], key));
                } else if (i == key) {
                    objects.push(obj[i]);
                }
            }
            return objects;
        }

        //return an array of keys that match on a certain value
        function getKeys(obj, val) {
            var objects = [];
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) 
                    continue;
                if (typeof obj[i] == 'object') {
                    objects = objects.concat(getKeys(obj[i], val));
                } else if (obj[i] == val) {
                    objects.push(i);
                }
            }
            return objects;
        }

        // var jsonQ = require("jsonq");
        var data = [
            {
                "text": "Logisland Historian",
                "state": {
                    "opened": true
                },
                "children": [
                    {
                        "text": "alerts",
                        "state": {
                            "disabled": true
                        },
                        "children": [],
                        "icon": "glyphicon glyphicon-flash"
                    }, {
                        "text": "graphs",
                        "state": {
                            "selected": true
                        },
                        "children": []
                    }, {
                        "text": "metrics",
                        "state": {
                            "selected": true
                        },
                        "children": []
                    }
                ]
            }
        ];

        var query = "#{url_for_solr}/select?indent=on&q=*:*&wt =json&facet=on&facet.field=name&fl=name";
        d3.json(query, function (json) {

            var facets = json.facet_counts.facet_fields.name;
            for (i = 0; i < facets.length; i += 2) {
                if (facets[i + 1] > 0) {

                    var tokens = facets[i].split(/[\s,\\\/]+/);
                    var tokenPos = 0;
                    var previousToken = "";
                    tokens.forEach(function (token) {

                        if (token != "") {
                            if (tokenPos == 0 && getObjects(data, 'text', token).length == 0) {
                                getObjects(data, 'text', 'metrics')[0]
                                    .children
                                    .push({'text': token});
                            } else if (getObjects(data, 'text', previousToken).length > 0) {
                                if (getObjects(data, 'text', previousToken)[0].children == undefined) {
                                    getObjects(data, 'text', previousToken)[0].children = [
                                        {
                                            'text': token
                                        }
                                    ];
                                } else {
                                    getObjects(data, 'text', previousToken)[0]
                                        .children
                                        .push({'text': token});
                                }

                            }
                            tokenPos++;
                            previousToken = token;
                        }
                    });

                }

            }

            console.log(getObjects(data, 'text', 'metrics')[0]);
        
        });
    </script>